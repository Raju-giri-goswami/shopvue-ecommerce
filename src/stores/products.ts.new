import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import axios from 'axios'

const API_BASE = '/ShopVue/backend/api'

export interface Product {
  id: string
  name: string
  description: string
  price: number
  image_url: string
  stock: number
  category: string
  created_at: string
  updated_at: string
}

export const useProductsStore = defineStore('products', () => {
  const products = ref<Product[]>([])
  const loading = ref(false)
  const currentPage = ref(1)
  const totalCount = ref(0)
  const searchQuery = ref('')
  const selectedCategory = ref('')
  const itemsPerPage = 12

  const categories = computed(() => {
    const cats = [...new Set(products.value.map(p => p.category))]
    return cats.filter(Boolean)
  })

  const filteredProducts = computed(() => {
    let filtered = products.value

    if (searchQuery.value) {
      filtered = filtered.filter(p => 
        p.name.toLowerCase().includes(searchQuery.value.toLowerCase()) ||
        p.description.toLowerCase().includes(searchQuery.value.toLowerCase())
      )
    }

    if (selectedCategory.value) {
      filtered = filtered.filter(p => p.category === selectedCategory.value)
    }

    return filtered
  })

  const paginatedProducts = computed(() => {
    const start = (currentPage.value - 1) * itemsPerPage
    const end = start + itemsPerPage
    return filteredProducts.value.slice(start, end)
  })

  const totalPages = computed(() => 
    Math.ceil(filteredProducts.value.length / itemsPerPage)
  )

  const fetchProducts = async () => {
    loading.value = true
    try {
      const response = await axios.get(`${API_BASE}/products/list.php`)
      if (response.data.data) {
        products.value = response.data.data
        totalCount.value = response.data.data.length
      }
    } catch (error) {
      console.error('Error fetching products:', error)
    } finally {
      loading.value = false
    }
  }

  const getProduct = async (id: string) => {
    loading.value = true
    try {
      const response = await axios.get(`${API_BASE}/products/detail.php`, {
        params: { id }
      })
      return response.data.data
    } catch (error) {
      console.error('Error fetching product:', error)
      return null
    } finally {
      loading.value = false
    }
  }

  const createProduct = async (product: Omit<Product, 'id' | 'created_at' | 'updated_at'>) => {
    loading.value = true
    try {
      const response = await axios.post(`${API_BASE}/admin/products.php`, product)
      if (response.data.success) {
        await fetchProducts()
        return { success: true }
      }
      throw new Error(response.data.message)
    } catch (error: any) {
      return { 
        success: false, 
        error: error.response?.data?.message || error.message 
      }
    } finally {
      loading.value = false
    }
  }

  const updateProduct = async (id: string, updates: Partial<Product>) => {
    loading.value = true
    try {
      const response = await axios.put(`${API_BASE}/admin/products.php`, {
        id,
        ...updates
      })
      if (response.data.success) {
        await fetchProducts()
        return { success: true }
      }
      throw new Error(response.data.message)
    } catch (error: any) {
      return { 
        success: false, 
        error: error.response?.data?.message || error.message 
      }
    } finally {
      loading.value = false
    }
  }

  const deleteProduct = async (id: string) => {
    loading.value = true
    try {
      const response = await axios.delete(`${API_BASE}/admin/products.php`, {
        data: { id }
      })
      if (response.data.success) {
        await fetchProducts()
        return { success: true }
      }
      throw new Error(response.data.message)
    } catch (error: any) {
      return { 
        success: false, 
        error: error.response?.data?.message || error.message 
      }
    } finally {
      loading.value = false
    }
  }

  return {
    products,
    loading,
    currentPage,
    totalCount,
    searchQuery,
    selectedCategory,
    itemsPerPage,
    categories,
    filteredProducts,
    paginatedProducts,
    totalPages,
    fetchProducts,
    getProduct,
    createProduct,
    updateProduct,
    deleteProduct
  }
})
