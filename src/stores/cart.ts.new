import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import axios from 'axios'
import { useAuthStore } from './auth'
import type { Product } from './products'

const API_BASE = '/ShopVue/backend/api'

export interface CartItem {
  id: string
  user_id: string
  product_id: string
  quantity: number
  created_at: string
  updated_at: string
  product?: Product
}

export const useCartStore = defineStore('cart', () => {
  const cartItems = ref<CartItem[]>([])
  const loading = ref(false)

  const totalItems = computed(() => {
    return cartItems.value.reduce((sum, item) => sum + item.quantity, 0)
  })

  const totalPrice = computed(() => {
    return cartItems.value.reduce((sum, item) => {
      return sum + (item.product?.price || 0) * item.quantity
    }, 0)
  })

  const fetchCartItems = async () => {
    const authStore = useAuthStore()
    if (!authStore.user) return

    loading.value = true
    try {
      const response = await axios.get(`${API_BASE}/cart/list.php`)
      if (response.data.success) {
        cartItems.value = response.data.data || []
      }
    } catch (error) {
      console.error('Error fetching cart items:', error)
    } finally {
      loading.value = false
    }
  }

  const addToCart = async (productId: string, quantity: number) => {
    const authStore = useAuthStore()
    if (!authStore.user) return { success: false, error: 'Not authenticated' }

    loading.value = true
    try {
      const response = await axios.post(`${API_BASE}/cart/add.php`, {
        product_id: productId,
        quantity
      })

      if (response.data.success) {
        await fetchCartItems()
        return { success: true }
      }
      throw new Error(response.data.message)
    } catch (error: any) {
      return { 
        success: false, 
        error: error.response?.data?.message || error.message 
      }
    } finally {
      loading.value = false
    }
  }

  const updateCartItem = async (productId: string, quantity: number) => {
    const authStore = useAuthStore()
    if (!authStore.user) return { success: false, error: 'Not authenticated' }

    loading.value = true
    try {
      const response = await axios.put(`${API_BASE}/cart/update.php`, {
        product_id: productId,
        quantity
      })

      if (response.data.success) {
        await fetchCartItems()
        return { success: true }
      }
      throw new Error(response.data.message)
    } catch (error: any) {
      return { 
        success: false, 
        error: error.response?.data?.message || error.message 
      }
    } finally {
      loading.value = false
    }
  }

  const removeFromCart = async (productId: string) => {
    const authStore = useAuthStore()
    if (!authStore.user) return { success: false, error: 'Not authenticated' }

    loading.value = true
    try {
      const response = await axios.delete(`${API_BASE}/cart/delete.php`, {
        data: { product_id: productId }
      })

      if (response.data.success) {
        await fetchCartItems()
        return { success: true }
      }
      throw new Error(response.data.message)
    } catch (error: any) {
      return { 
        success: false, 
        error: error.response?.data?.message || error.message 
      }
    } finally {
      loading.value = false
    }
  }

  const clearCart = async () => {
    const authStore = useAuthStore()
    if (!authStore.user) return { success: false, error: 'Not authenticated' }

    loading.value = true
    try {
      const response = await axios.post(`${API_BASE}/cart/clear.php`)
      
      if (response.data.success) {
        cartItems.value = []
        return { success: true }
      }
      throw new Error(response.data.message)
    } catch (error: any) {
      return { 
        success: false, 
        error: error.response?.data?.message || error.message 
      }
    } finally {
      loading.value = false
    }
  }

  return {
    cartItems,
    loading,
    totalItems,
    totalPrice,
    fetchCartItems,
    addToCart,
    updateCartItem,
    removeFromCart,
    clearCart
  }
})
